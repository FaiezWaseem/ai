[
  {
    "role": "user",
    "text": "Create a Ui Like Lovable Chat Where on Left Side User Can Chat to create a project and on Write Will be a Preview"
  },
  {
    "role": "model",
    "text": "```json\n{\n  \"name\": \"Lovable Chat UI\",\n  \"description\": \"A React application simulating a chat interface for project creation with a live preview on the right.\",\n  \"technologies\": [\"React\", \"TypeScript\", \"Tailwind CSS\"],\n  \"installation\": [\n    \"npm install\",\n    \"npm start\"\n  ],\n  \"files\": [\n    \"src/App.tsx\",\n    \"src/components/Chat.tsx\",\n    \"src/components/Preview.tsx\",\n    \"src/components/Message.tsx\",\n    \"src/styles.css\"\n  ],\n  \"code\": {\n    \"src/App.tsx\": \"import React, { useState } from 'react';\\nimport Chat from './components/Chat';\\nimport Preview from './components/Preview';\\n\\nfunction App() {\\n  const [projectData, setProjectData] = useState({});\\n  return (\\n    <div className=\\\"flex w-screen h-screen\\\">\\n      <Chat setProjectData={setProjectData} />\\n      <Preview projectData={projectData} />\\n    </div>\\n  );\\n}\\n\\nexport default App;\",\n    \"src/components/Chat.tsx\": \"import React, { useState } from 'react';\\n\\ninterface Props {\\n  setProjectData: (data: any) => void;\\n}\\n\\nconst Chat: React.FC<Props> = ({ setProjectData }) => {\\n  const [messages, setMessages] = useState([]);\\n  const [newMessage, setNewMessage] = useState('');\\n\\n  const handleMessageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    setNewMessage(e.target.value);\\n  };\\n\\n  const handleSendMessage = () => {\\n    const updatedMessages = [...messages, { text: newMessage, sender: 'user' }];\\n    setMessages(updatedMessages);\\n    setNewMessage('');\\n    //Simulate processing the message to update projectData\\n    const projectData = processMessage(newMessage);\\n    setProjectData(projectData);\\n  };\\n\\n  const processMessage = (message: string): any => {\\n    //Replace with your actual project data processing logic\\n    const keywords = message.toLowerCase().split(' ');\\n    const data = {};\\n    if (keywords.includes('name')) {\\n      data['name'] = keywords.find((word) => word.startsWith('name:'))?.substring(5);\\n    }\\n    if (keywords.includes('description')) {\\n      data['description'] = keywords.find((word) => word.startsWith('description:'))?.substring(12);\\n    }\\n    return data;\\n  };\\n\\n  return (\\n    <div className=\\\"w-1/2 p-4\\\">\\n      <div className=\\\"flex flex-col-reverse h-full\\\">\\n        {messages.map((message, index) => (\\n          <div key={index} className=\\\"mb-2\\\">\\n            <p>{message.text}</p>\\n          </div>\\n        ))}\\n      </div>\\n      <div className=\\\"flex mt-2\\\">\\n        <input\\n          type=\\\"text\\\"\\n          value={newMessage}\\n          onChange={handleMessageChange}\\n          placeholder=\\\"Type your message...\\\"\\n          className=\\\"flex-1 p-2 border border-gray-300 rounded\\\"\\n        />\\n        <button onClick={handleSendMessage} className=\\\"p-2 ml-2 bg-blue-500 text-white rounded\\\">Send</button>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Chat;\",\n    \"src/components/Preview.tsx\": \"import React from 'react';\\n\\ninterface Props {\\n  projectData: any;\\n}\\n\\nconst Preview: React.FC<Props> = ({ projectData }) => {\\n  return (\\n    <div className=\\\"w-1/2 p-4\\\">\\n      <h2 className=\\\"text-xl font-bold\\\">Project Preview</h2>\\n      <div>\\n          {Object.keys(projectData).map((key) => (\\n            <div key={key}>\\n              <p><b>{key}:</b> {projectData[key]}</p>\\n            </div>\\n          ))}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Preview;\"\n  }\n}\n```\n"
  },
  {
    "role": "user",
    "text": "add option to Attach files"
  },
  {
    "role": "model",
    "text": "```json\n{\n  \"name\": \"Lovable Chat UI with File Attachment\",\n  \"description\": \"A React application simulating a chat interface for project creation with a live preview and file attachment on the right.\",\n  \"technologies\": [\"React\", \"TypeScript\", \"Tailwind CSS\"],\n  \"installation\": [\n    \"npm install\",\n    \"npm start\"\n  ],\n  \"files\": [\n    \"src/App.tsx\",\n    \"src/components/Chat.tsx\",\n    \"src/components/Preview.tsx\",\n    \"src/components/Message.tsx\",\n    \"src/styles.css\"\n  ],\n  \"code\": {\n    \"src/App.tsx\": \"import React, { useState } from 'react';\\nimport Chat from './components/Chat';\\nimport Preview from './components/Preview';\\n\\nfunction App() {\\n  const [projectData, setProjectData] = useState({});\\n  return (\\n    <div className=\\\"flex w-screen h-screen\\\">\\n      <Chat setProjectData={setProjectData} />\\n      <Preview projectData={projectData} />\\n    </div>\\n  );\\n}\\n\\nexport default App;\",\n    \"src/components/Chat.tsx\": \"import React, { useState } from 'react';\\n\\ninterface Props {\\n  setProjectData: (data: any) => void;\\n}\\n\\nconst Chat: React.FC<Props> = ({ setProjectData }) => {\\n  const [messages, setMessages] = useState([]);\\n  const [newMessage, setNewMessage] = useState('');\\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\\n\\n  const handleMessageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    setNewMessage(e.target.value);\\n  };\\n\\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    setSelectedFiles(Array.from(e.target.files || []));\\n  };\\n\\n  const handleSendMessage = () => {\\n    const updatedMessages = [...messages, { text: newMessage, sender: 'user', files: selectedFiles }];\\n    setMessages(updatedMessages);\\n    setNewMessage('');\\n    setSelectedFiles([]);\\n    //Simulate processing the message to update projectData\\n    const projectData = processMessage(newMessage, selectedFiles);\\n    setProjectData(projectData);\\n  };\\n\\n  const processMessage = (message: string, files: File[]): any => {\\n    //Replace with your actual project data processing logic\\n    const keywords = message.toLowerCase().split(' ');\\n    const data = {};\\n    if (keywords.includes('name')) {\\n      data['name'] = keywords.find((word) => word.startsWith('name:'))?.substring(5);\\n    }\\n    if (keywords.includes('description')) {\\n      data['description'] = keywords.find((word) => word.startsWith('description:'))?.substring(12);\\n    }\\n    if (files.length > 0) {\\n      data['files'] = files.map((file) => file.name);\\n    }\\n    return data;\\n  };\\n\\n  return (\\n    <div className=\\\"w-1/2 p-4\\\">\\n      <div className=\\\"flex flex-col-reverse h-full\\\">\\n        {messages.map((message, index) => (\\n          <div key={index} className=\\\"mb-2\\\">\\n            <p>{message.text}</p>\\n            {message.files && message.files.map((file) => <p key={file.name}>{file.name}</p> )}\\n          </div>\\n        ))}\\n      </div>\\n      <div className=\\\"flex mt-2\\\">\\n        <input\\n          type=\\\"file\\\"\\n          multiple\\n          onChange={handleFileChange}\\n          className=\\\"p-2 border border-gray-300 rounded\\\"\\n        />\\n        <input\\n          type=\\\"text\\\"\\n          value={newMessage}\\n          onChange={handleMessageChange}\\n          placeholder=\\\"Type your message...\\\"\\n          className=\\\"flex-1 p-2 ml-2 border border-gray-300 rounded\\\"\\n        />\\n        <button onClick={handleSendMessage} className=\\\"p-2 ml-2 bg-blue-500 text-white rounded\\\">Send</button>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Chat;\",\n    \"src/components/Preview.tsx\": \"import React from 'react';\\n\\ninterface Props {\\n  projectData: any;\\n}\\n\\nconst Preview: React.FC<Props> = ({ projectData }) => {\\n  return (\\n    <div className=\\\"w-1/2 p-4\\\">\\n      <h2 className=\\\"text-xl font-bold\\\">Project Preview</h2>\\n      <div>\\n        {Object.keys(projectData).map((key) => (\\n          <div key={key}>\\n            <p><b>{key}:</b> {Array.isArray(projectData[key]) ? projectData[key].join(', ') : projectData[key]}</p>\\n          </div>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Preview;\"\n  }\n}\n```\n"
  },
  {
    "role": "user",
    "text": "the Side Chat Bar Should be 30% Width and Preview Area Should be 70%, "
  },
  {
    "role": "model",
    "text": "```json\n{\n  \"name\": \"Lovable Chat UI with File Attachment and Responsive Layout\",\n  \"description\": \"A React application simulating a chat interface for project creation with a live preview and file attachment, using a responsive layout.\",\n  \"technologies\": [\"React\", \"TypeScript\", \"Tailwind CSS\"],\n  \"installation\": [\n    \"npm install\",\n    \"npm start\"\n  ],\n  \"files\": [\n    \"src/App.tsx\",\n    \"src/components/Chat.tsx\",\n    \"src/components/Preview.tsx\",\n    \"src/components/Message.tsx\",\n    \"src/styles.css\"\n  ],\n  \"code\": {\n    \"src/App.tsx\": \"import React, { useState } from 'react';\\nimport Chat from './components/Chat';\\nimport Preview from './components/Preview';\\n\\nfunction App() {\\n  const [projectData, setProjectData] = useState({});\\n  return (\\n    <div className=\\\"flex w-screen h-screen\\\">\\n      <Chat setProjectData={setProjectData} className=\\\"w-3/10\\\" />\\n      <Preview projectData={projectData} className=\\\"w-7/10\\\" />\\n    </div>\\n  );\\n}\\n\\nexport default App;\",\n    \"src/components/Chat.tsx\": \"import React, { useState } from 'react';\\n\\ninterface Props {\\n  setProjectData: (data: any) => void;\\n  className?: string;\\n}\\n\\nconst Chat: React.FC<Props> = ({ setProjectData, className }) => {\\n  const [messages, setMessages] = useState([]);\\n  const [newMessage, setNewMessage] = useState('');\\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\\n\\n  const handleMessageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    setNewMessage(e.target.value);\\n  };\\n\\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    setSelectedFiles(Array.from(e.target.files || []));\\n  };\\n\\n  const handleSendMessage = () => {\\n    const updatedMessages = [...messages, { text: newMessage, sender: 'user', files: selectedFiles }];\\n    setMessages(updatedMessages);\\n    setNewMessage('');\\n    setSelectedFiles([]);\\n    //Simulate processing the message to update projectData\\n    const projectData = processMessage(newMessage, selectedFiles);\\n    setProjectData(projectData);\\n  };\\n\\n  const processMessage = (message: string, files: File[]): any => {\\n    //Replace with your actual project data processing logic\\n    const keywords = message.toLowerCase().split(' ');\\n    const data = {};\\n    if (keywords.includes('name')) {\\n      data['name'] = keywords.find((word) => word.startsWith('name:'))?.substring(5);\\n    }\\n    if (keywords.includes('description')) {\\n      data['description'] = keywords.find((word) => word.startsWith('description:'))?.substring(12);\\n    }\\n    if (files.length > 0) {\\n      data['files'] = files.map((file) => file.name);\\n    }\\n    return data;\\n  };\\n\\n  return (\\n    <div className={`${className || ''} p-4 h-full overflow-y-auto`}>\\n      <div className=\\\"flex flex-col-reverse h-full\\\">\\n        {messages.map((message, index) => (\\n          <div key={index} className=\\\"mb-2\\\">\\n            <p>{message.text}</p>\\n            {message.files && message.files.map((file) => <p key={file.name}>{file.name}</p> )}\\n          </div>\\n        ))}\\n      </div>\\n      <div className=\\\"flex mt-2\\\">\\n        <input\\n          type=\\\"file\\\"\\n          multiple\\n          onChange={handleFileChange}\\n          className=\\\"p-2 border border-gray-300 rounded\\\"\\n        />\\n        <input\\n          type=\\\"text\\\"\\n          value={newMessage}\\n          onChange={handleMessageChange}\\n          placeholder=\\\"Type your message...\\\"\\n          className=\\\"flex-1 p-2 ml-2 border border-gray-300 rounded\\\"\\n        />\\n        <button onClick={handleSendMessage} className=\\\"p-2 ml-2 bg-blue-500 text-white rounded\\\">Send</button>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Chat;\",\n    \"src/components/Preview.tsx\": \"import React from 'react';\\n\\ninterface Props {\\n  projectData: any;\\n  className?: string;\\n}\\n\\nconst Preview: React.FC<Props> = ({ projectData, className }) => {\\n  return (\\n    <div className={`${className || ''} p-4 h-full overflow-y-auto`}>\\n      <h2 className=\\\"text-xl font-bold\\\">Project Preview</h2>\\n      <div>\\n        {Object.keys(projectData).map((key) => (\\n          <div key={key}>\\n            <p><b>{key}:</b> {Array.isArray(projectData[key]) ? projectData[key].join(', ') : projectData[key]}</p>\\n          </div>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Preview;\"\n  }\n}\n```"
  }
]